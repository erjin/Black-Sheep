A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.
Note:

Your solution should be in logarithmic complexity.

Idea:
重点在于 首尾都是无限小 所以用的方法是 找到positive trending 这样的话 要么一直找到底 肯定是peak local maximum 要么会找到一个小的数字 这样也是local maximum

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        return helper(nums, 0, nums.size()-1);
    }
    
    int helper(vector<int>& nums, int low, int high){
        if(low == high){
            return low;
        }
        
        int mid1 = (low + high)/2;
        int mid2 = mid1 + 1;
        
        if(nums[mid2]>nums[mid1]){
            return helper(nums, mid2, high);
        }else{
            return helper(nums, low, mid1);
        }
        
        
        
    }
};
