The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314


Idea:
关键点在于 找到规则
例如 n = 3, k = 3
就有
123
132
213
231
312
321
的排列组合

可归纳为
1+{2，3}
2+{1，3}
3+{1，2}
的sub pro

那么k = 3 第一个数字的index 就是 （3-1）%2！= 1...0  (3要减1 是因为从0开始算index)
那么index就是 1  在这里【1，2，3】 也就是 2
所以第一个数字是2
问题简化为

1+{3}
3+{1} 因为 余数为index0  那么答案就是213




class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int> factorial;
        vector<int> num;
        string ans;
        
        factorial.push_back(1);
        for(int i = 0; i<n; i++){
            num.push_back(i+1);
            factorial.push_back(factorial[i]*(i+1));
        }
        // 1 2 3 4
        // 1 1 2 6 24     
        
        
        k--;
    
        for(int i = 1; i <= n; i++){
            int index = k/factorial[n-i];
            ans.append(to_string(num[index]));
            num.erase(num.begin()+index);
            k%=factorial[n-i];
        }
        
        return ans;
        
        
    }
};"
