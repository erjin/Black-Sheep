You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Idea:
关键点在于 要上第n个台阶 可以 从 n-1 跨一步 也可以从n-2 跨两步 所以上第n个台阶的方式 就是 上n-1台阶的方式 加上n-2台阶的方式加起来

公式 就是 dp[i] = dp[i-1] + dp[-2];


class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n,0);       
        dp[0] = 1;
        dp[1] = 2;
        for(int i = 2; i< n; i++){
            dp[i] = dp[i-1]+dp[i-2];
        }
        
        return dp[n-1];
        
    }
};
