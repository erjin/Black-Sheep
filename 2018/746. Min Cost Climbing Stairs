On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).

Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.

Example 1:
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
Example 2:
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].
Note:
cost will have a length in the range [2, 1000].
Every cost[i] will be an integer in the range [0, 999].


Idea:
第一次没看答案做出来的dp um... 大概所有的dp 我都会贴 因为我不会啊

这题很像climb stairs 关键点在于 你要爬到顶点的话 你可以选择从n-2 跨两步 也可以从n-1 跨一步 那么问题就变成 是 从 n-2 跨呢 还是从 n-1跨 选其中cost 少的那个 那么怎么算呢 举个例子 比如 在index 2 台阶的时候 你可以从index0 跨两步 从index1 跨一步 上index2 你又会付cost[2] 所以 公式如下

            m[i] = min(m[i-2], m[i-1])+cost[i];   

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> m(cost.size(),1000);
        
        m[0] = cost[0];
        m[1] = cost[1];
        
        for(int i = 2; i<cost.size();i++){
            m[i] = min(m[i-2], m[i-1])+cost[i];   
        }
        
        return min(m[cost.size()-2],m[cost.size()-1]);
    }
};

