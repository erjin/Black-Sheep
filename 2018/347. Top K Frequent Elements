Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size


Idea:
和451一样的道理 用vector index 来存 frequency 问题是 这题不是string 所以不能直接append char 所以要用vector<vector<int>> double vector 去存 第一层存 frequency 第二层存单个的数字

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> freq;
        for(auto num : nums){
            freq[num]++;
        }

        vector<vector<int>> bucket(nums.size() +1);

        for(auto f: freq){
            bucket[f.second].push_back(f.first);
        }
        
        vector<int> ans;
        for(int i = bucket.size()-1 ; i > 0 ; i--){
            for(int j = 0 ; j < bucket[i].size() ; j++){
                ans.push_back(bucket[i][j]);
                if(ans.size()==k){
                    return ans;
                }
            }
        }
    }
};.
