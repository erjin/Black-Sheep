Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

Idea:
关键点在于 要两个变量 一个变量 sum 是用来存非负数的和 每当当前的和是负数时就reset成0 理由是 如果已经是负数了 只会给接下来的数值带来负面的影响 会让值变小 那就应该重置当前的和为零 一个是用来存每次loop下的最大值 也是就是答案 通过和新的和和自己比较 取最大值 这样即使是重置了 也有最大的值保留着 


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans = nums[0];
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            ans = max(sum,ans);
            sum = max(sum,0);
        }
        return ans;
    }
};

Idea:
其实我觉得上面写的有点绕脑子 其实就是如果 当前值要比当前值加上sum值要大的话 取当前值为新的sum 不然就是 sum+nums[i] 上面改写如下

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans = nums[0];
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            sum = max(sum,nums[i]);
            ans = max(sum,ans);

        }
        return ans;
    }
};

一行写法如下

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans = nums[0];
        int sum = 0;
        for(int i=0; i< nums.size(); i++){
            sum = nums[i]>sum+nums[i] ? nums[i] : sum+nums[i];
            ans = max(ans, sum);
        }
        
        return ans;
    }
};

Idea:
这题作为是在dp 分类下面的 我觉得像个假的dp
因为没有必要要用dp的感觉  就是保持sum的非负属性 其实都一样

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        vector<int> dp(nums.size(), 0);
        dp[0] = nums[0];
        int ans = dp[0];
        
        for(int i = 1; i < nums.size(); i++){
            dp[i] = nums[i] + (dp[i-1] > 0 ? dp[i-1] : 0);
            ans = max(dp[i],ans);
        }
        return ans;
    }
};







