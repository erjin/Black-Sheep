Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

Idea:
关键点在于用index 来存frequency 

class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> hash;
        for(int i = 0 ; i < s.size() ; i++){
            hash[s[i]]++;
        }
        
        vector<string> info(s.size() +1 ,"");
        
        for(auto& itr: hash){
            char c = itr.first;
            int n = itr.second;
            info[n].append(n,c);
        }
        
        string ans="";
        
        for(int i= s.size(); i>0 ; i--){
            ans.append(info[i]);
        }
        
        return ans; 
        
    }
};

