Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.


Idea:
三个loop 解决所有啊 bfs 吧





class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.empty()) return vector<string>();
        vector<string> res;
        vector<string> tempres;
        vector<string> charmap = {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        res.push_back("");
        for(char c: digits){
            int index = c - '0';
            vector<string> tempres;
            for(char c: charmap[index]){
                for(auto s: res){
                    tempres.push_back(s+c);    
                } 
            }
            res = tempres;
        }
        return res;
    }
};
